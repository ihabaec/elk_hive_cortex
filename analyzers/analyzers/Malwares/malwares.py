#!/usr/bin/env python3
# encoding: utf-8

import time
import hashlib

from malwares_api import Api
from cortexutils.analyzer import Analyzer


class MalwaresAnalyzer(Analyzer):
    def __init__(self):
        Analyzer.__init__(self)
        self.service = self.get_param(
            "config.service", None, "Service parameter is missing"
        )
        self.key = self.get_param("config.key", None, "Missing Malware API key")
        self.polling_interval = self.get_param("config.polling_interval", 60)
        self.m_api = Api(self.key)

    def check_response(self, response):
        if type(response) is not dict:
            self.error("Bad response : " + str(response))
        status = response.get("response_code", 500)
        if status == 429:
            self.error("Malwares api rate limit exceeded.")
        elif status >= 400:
            self.error("Bad status : " + str(status))
        return response.get("results", {})

    def wait_file_report(self, id):
        response = self.m_api.get_file_report(id)
        results = self.check_response(response)
        status = response.get("response_code", 500)
        if status == 200:
            self.report(results)
        else:
            time.sleep(self.polling_interval)
            self.wait_file_report(id)

    def read_scan_response(self, response, func):
        results = self.check_response(response)
        status = response.get("response_code", 500)
        sha256 = results.get("ctx_data", {}).get("sha256", None)

        if status in (200, 202) and sha256 is not None:
            func(sha256)
        else:
            self.error("%d %s - Scan not found" % (status, sha256))

    def summary(self, raw):
        taxonomies = []
        level = "info"
        namespace = "Malwares"

        ctx_data = raw.get("ctx_data", {})
        detect = ctx_data.get("detect", "malicious")
        tags = raw.get("ctx_data", {}).get("tags", [])

        if detect == "normal":
            level = "safe"
        else:
            level = "malicious"

        taxonomies.append(self.build_taxonomy(level, namespace, "Detect", detect))
        taxonomies.append(self.build_taxonomy(level, namespace, "Tags", tags))

        return {"taxonomies": taxonomies}

    def run(self):
        if self.service == "scan":
            if self.data_type == "file":
                filename = self.get_param("filename", "noname.ext")
                filepath = self.get_param("file", None, "File is missing")
                self.read_scan_response(
                    self.m_api.scan_file(filepath, filename), self.wait_file_report
                )
            else:
                self.error("Invalid data type")

        elif self.service == "get":
            if self.data_type == "domain":
                data = self.get_param("data", None, "Data is missing")
                self.report(self.check_response(self.m_api.get_domain_report(data)))
            elif self.data_type == "ip":
                data = self.get_param("data", None, "Data is missing")
                self.report(self.check_response(self.m_api.get_ip_report(data)))
            elif self.data_type == "file":
                hashes = self.get_param("attachment.hashes", None)
                if hashes is None:
                    filepath = self.get_param("file", None, "File is missing")
                    hash = hashlib.sha256(open(filepath, "rb").read()).hexdigest()
                else:
                    # find SHA256 hash
                    hash = next(h for h in hashes if len(h) == 64)

                self.report(self.check_response(self.m_api.get_file_report(hash)))

            elif self.data_type == "hash":
                data = self.get_param("data", None, "Data is missing")
                self.report(self.check_response(self.m_api.get_file_report(data)))
            else:
                self.error("Invalid data type")
        else:
            self.error("Invalid service")


if __name__ == "__main__":
    MalwaresAnalyzer().run()
