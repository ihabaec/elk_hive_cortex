#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import requests


class Api:
    def __init__(self, api_key=None):
        self.api_key = api_key
        self.base = "https://api.ctx.io/v1"
        self.headers = {"x-api-key": self.api_key}
        self.version = 2
        if api_key is None:
            raise ApiError("You must supply a valid Malwares API key.")

    def scan_file(self, filepath, filename):
        """Submit a file to be scanned by Malwares

        :param this_file: File to be scanned (200MB file size limit)
        :param this_filename: Filename for scanned file
        :return: JSON response that contains scan_id and permalink.
        """

        try:
            files = {
                "file": (
                    filename,
                    open(filepath, "rb"),
                    "application/octet-stream",
                )
            }
        except TypeError as e:
            return dict(error=e.message)

        try:
            response = requests.post(
                self.base + "/file/upload", files=files, headers=self.headers
            )
        except requests.RequestException as e:
            return dict(error=e.message)

        return _return_response_and_status_code(response)

    def get_file_report(self, hash):
        """Get the scan results for a file.

        :param this_hash: The md5/sha1/sha256/scan_ids hash of the file whose dynamic behavioural report you want to
                            retrieve or scan_ids from a previous call to scan_file.
        :return:
        """

        try:
            response = requests.get(
                self.base + f"/file/report/{hash}", headers=self.headers
            )
        except requests.RequestException as e:
            return dict(error=e.message)

        return _return_response_and_status_code(response)

    def get_ip_report(self, ip):
        """Get IP address reports.

        :param this_ip: a valid IPv4 address in dotted quad notation, for the time being only IPv4 addresses are
                        supported.
        :return: JSON response
        """

        try:
            response = requests.get(self.base + f"/total/ip/{ip}", headers=self.headers)
        except requests.RequestException as e:
            return dict(error=e.message)

        return _return_response_and_status_code(response)

    def get_domain_report(self, this_domain):
        """Get information about a given domain.

        :param this_domain: a domain name.
        :return: JSON response
        """

        try:
            response = requests.get(
                self.base + f"/total/domain/{this_domain}", headers=self.headers
            )
        except requests.RequestException as e:
            return dict(error=e.message)

        return _return_response_and_status_code(response)


class ApiError(Exception):
    pass


def _return_response_and_status_code(response):
    """Output the requests response JSON and status code

    :rtype : dict
    :param response: requests response object
    :return: dict containing the JSON response and/or the status code with error string.
    """

    result_codes = {
        200: "Request Succeeded, Data Returned",
        202: "Collecting Data (asynchronous API)",
        400: "Parameter Error",
        401: "Authentication Required",
        403: "No Permission",
        404: "Data Not Found",
        415: "Media Contents Type Error",
        429: "Exceeded Usage Limit",
        500: "Server Error",
    }

    results = response.json()

    result_code = results.get("ctx_result", {}).get("result_code", 500)
    result_message = result_codes[result_code]
    return dict(
        results=results, response_code=result_code, result_message=result_message
    )
